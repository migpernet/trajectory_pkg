Manual para simulação 

a) Abrir o Gazebo junto com o Moveit/Rviz "sem a garra"
--> roslaunch trajectory_pkg spawn_ur5_eff_controller.launch

b) Posicionar o robô na posição inicial
--> rosrun trajectory_pkg pos_initial.py

c) Inserir os obstáculos no Gazebo
--> rosrun trajectory_pkg spawn_spheres.py

d) Remover obstáculos no Gazebo
--> rosrun trajectory_pkg remove_spheres_gazebo.py

e) Movimentar o robô entre duas posições utilizando o Rviz 
--> rosrun trajectory_pkg analisador.py

f) Planejamento de trajetória do robô com o algoritmo de "Campos Potenciais Artificiais Tradicional"
--> rosrun trajectory_pkg cpa_basic.py

g) Planejamento de trajetória do robô com o algoritmo de "Campos Potenciais Artificiais Tradicional"
--> rosrun trajectory_pkg cpa_basic2.py

h) Planejamento de trajetória do robô com o algoritmo de "Campos Potenciais Artificiais Adaptativos"
--> rosrun trajectory_pkg cpa_basic3.py

i) Verificar a posição do robô no espaço cartesiano
--> rosrun tf tf_echo /base_link /tool0

j) Adicionar obstáculos no Moveit
--> rosrun trajectory_pkg obstaculos.py

l) Excluir obstáculos no Moveit
--> rosrun trajectory_pkg remove_spheres.py

*************************************************************************************

Distância dos obstáculos:
Obs: No script " spawn_spheres.py" para inserir os obstáculos é necessário adicionar a elevação do robô "1.015 m"
     Nos scripts de cpa pode-se colocar da forma que está anotado abaixo.

1 - Para goal position: [-0.488, 0.191, 0.510]
a) teste 1: [-0.2, -0.1915, 0.75], [-0.3, 0.191, 0.65]
b) teste 2: [-0.2, 0.0, 0.75], [-0.2, 0.191, 0.65] # Para estes obstáculos o robô não conseguiu passar os obstáculos
c) teste 3: [-0.4, 0.0, 0.75], [-0.4, 0.191, 0.65] #

2 - Para goal position: [-0.488, 0.191, 0.510]
