Tutorial for aplplication and study of dynamic analysis.

(Terminal 1 - inicie o Gazebo e o controlador)
# lançar o robô para simular o comportamento dinâmico
   roslaunch trajectory_pkg ur5_custom_effort_gazebo.launch


(Terminal 2 - para verificar se o controlador está ativo e o tópico correto)
   rostopic list
   rostopic hz /ur5/joint_states
   rostopic echo /ur5/joint_states
   rostopic echo /ur5/simple_effort_controller/command
  
   
(Terminal 3 - rodar o script com as equações dinâmicas explicitas, para fins de comparação posterior).
  rosrun trajectory_pkg simulation_dynamic_ur5.py     (precisa analisar melhor estes resultados, estou achando muito estranho)


(Terminal 4 - o script para enviar torques e gravar resultados do Gazebo)
  rosrun trajectory_pkg send_torques_to_gazebo.py    (esse script está com delay muito grande aguardando receber a mensagem do subscriber)
  rosrun trajectory_pkg send_torque_command.py      (esse script consegue mover o manipuldor sem delay)
  

(Terminal 5 - para a comparação)
  rosrun trajectory_pkg compare_simulations.py       (está desconfigurado, tentar plotar os gráficos pelo próprio ambiente)




Dicas: 
Para visualizar dados no rqt_plot:
    Digite o tópico + índice (/nome_do_topico/data[0])

    /ur5/simple_effort_controller/command/data[5]  (o valor corresponde à junta)
    /ur5/joint_states/position[5]   

Tmbém pode ser utilizado:
rosrun plotjuggler plotjuggler
